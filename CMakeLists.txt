cmake_minimum_required(VERSION 2.8)
INCLUDE(FindPkgConfig)
INCLUDE(UsePkgConfig)

# --- general project setup ---
PROJECT("RoboticsCoordinateTransformTools")
SET(RCTTOOLS_NAME rct-tools)
SET(RCTTOOLS_VERSION_MAJOR "1")
SET(RCTTOOLS_VERSION_MINOR "0")
SET(RCTTOOLS_VERSION_REVISION "1")
SET(RCTTOOLS_VERSION_SHORT "${RCTTOOLS_VERSION_MAJOR}.${RCTTOOLS_VERSION_MINOR}")
SET(RCTTOOLS_VERSION "${RCTTOOLS_VERSION_MAJOR}.${RCTTOOLS_VERSION_MINOR}.${RCTTOOLS_VERSION_REVISION}")

SET(PREFIX ${CMAKE_INSTALL_PREFIX})
SET(BINDIR "${PREFIX}/bin")
SET(INCLUDEDIR "${PREFIX}/include")
SET(MANDIR "${PREFIX}/man")
SET(LIBDIR "${PREFIX}/lib/")
SET(DATADIR "${PREFIX}/share/${PACKET}")

SET(CMAKE_SKIP_BUILD_RPATH  FALSE)
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)

# --- dependencies ---
#rsc
FIND_PACKAGE(RCT ${RCTTOOLS_VERSION_SHORT} REQUIRED)
MESSAGE(STATUS "RCT version: ${RCT_VERSION}")
INCLUDE_DIRECTORIES(BEFORE SYSTEM ${RCT_INCLUDE_DIRS})
LINK_DIRECTORIES(${RCT_LIBRARY_DIRS})
ADD_DEFINITIONS(${RCT_CFLAGS})

SET(PROJECT_CMAKE_PATH "${CMAKE_INSTALL_PREFIX}/share/cmake/Modules")
SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/Modules )

#eigen3
FIND_PACKAGE(Eigen3 REQUIRED)
INCLUDE_DIRECTORIES(BEFORE SYSTEM  ${Eigen3_INCLUDE_DIRS})
LINK_DIRECTORIES(${Eigen3_LIBRARY_DIRS})

#rsc
find_package(RSC 0.11 REQUIRED)
message(STATUS "RSC version: ${RSC_VERSION}")
include_directories(BEFORE SYSTEM ${RSC_INCLUDE_DIRS})
link_directories(${RSC_LIBRARY_DIRS})

FIND_PACKAGE(tf2_ros QUIET)
IF(tf2_ros_FOUND)
    INCLUDE_DIRECTORIES(BEFORE SYSTEM  ${tf2_ros_INCLUDE_DIRS})
    LINK_DIRECTORIES(${tf2_ros_LIBRARY_DIRS})
    MESSAGE(STATUS "TF2-ros found. Version: ${tf2_ros_VERSION}")
ELSE(tf2_ros_FOUND)
    MESSAGE(STATUS "TF2-ros not found. ROS support will NOT be built !!!")
ENDIF(tf2_ros_FOUND)

#boost
FIND_PACKAGE(Boost REQUIRED QUIET COMPONENTS thread program_options date_time)
INCLUDE_DIRECTORIES(Boost_INCLUDE_DIRS)
ADD_DEFINITIONS(-DBOOST_LOG_DYN_LINK)

FIND_PACKAGE(PopplerQt4 QUIET)
IF(POPPLERQT4_FOUND)
    FIND_PACKAGE(Qt4 REQUIRED)
    if(QT_FOUND)
        SET(QT_USE_QTOPENGL true)
        INCLUDE(${QT_USE_FILE})
        INCLUDE_DIRECTORIES(${QT_INCLUDE_DIR})
        MESSAGE(STATUS "PopplerQt4 found")
        INCLUDE_DIRECTORIES(BEFORE SYSTEM  ${POPPLERQT4_INCLUDE_DIRS})
        LINK_DIRECTORIES(${POPPLERQT4_LIBRARY_DIRS})
    else(QT_FOUND)
        set(POPPLERQT4_FOUND FAlSE)
        MESSAGE(STATUS "Qt4 for PopplerQt4 not found")
    endif(QT_FOUND)
ELSE(POPPLERQT4_FOUND)
    MESSAGE(STATUS "PopplerQt4 not found")
ENDIF(POPPLERQT4_FOUND)

FIND_PACKAGE(PopplerQt5 QUIET)
IF(POPPLERQT5_FOUND)
    set(CMAKE_INCLUDE_CURRENT_DIR ON)
    set(CMAKE_AUTOMOC ON)
    FIND_PACKAGE(Qt5 COMPONENTS Widgets Core)
    if(Qt5_FOUND)
        SET(QT_USE_QTOPENGL true)
        #INCLUDE(${Qt5_USE_FILE})
        INCLUDE_DIRECTORIES(${Qt5Widgets_INCLUDE_DIRS} ${Qt5Core_INCLUDE_DIRS})
        add_definitions(${Qt5_DEFINITIONS} "-fPIC")
        MESSAGE(STATUS "PopplerQt5 found")
        INCLUDE_DIRECTORIES(BEFORE SYSTEM ${POPPLERQT5_INCLUDE_DIRS})
        LINK_DIRECTORIES(${POPPLERQT5_LIBRARY_DIRS})
    else(Qt5_FOUND)
        set(POPPLERQT5_FOUND FAlSE)
        MESSAGE(STATUS "Qt5 for PopplerQt5 not found")
    endif(Qt5_FOUND)
ELSE(POPPLERQT5_FOUND)
    MESSAGE(STATUS "PopplerQt5 not found")
ENDIF(POPPLERQT5_FOUND)

IF(POPPLERQT5_FOUND OR POPPLERQT4_FOUND)
    
ENDIF(POPPLERQT5_FOUND OR POPPLERQT4_FOUND)

configure_file(src/rct/rct-tools-config.h.in "${PROJECT_BINARY_DIR}/src/rct/rct-tools-config.h")
include_directories("${PROJECT_BINARY_DIR}/src/rct/")

# --- build instructions ---
ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(examples)
